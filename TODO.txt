Graphics Tasks:
• Shadow Maps
    • Hardcode a simple scene with a few objects & a large "floor" mesh to test
    • Start with simple single-cascade hard shadows
    • Render opaque geometry in Directional Light-Space w/ front-face culling to a high resolution shadow map
    • Sample shadow map in Shader & compare with light-space depth
    • Implement soft shadows via 3x3 PCF
    • Further improve soft shadows with with a "Comparison Sampler"
    • Cascaded Shadow Maps
• Mesh loading
    • use library: https://github.com/assimp/assimp
    • Manage scene objects' meshes & materials
    • non-trivial general-purpose scene rendering
    • Example scenes: https://casual-effects.com/data/ & https://github.com/KhronosGroup/glTF-Sample-Models
        • NOTE: .obj files only support bump maps, not normal maps. convert them to normal maps manually offline or in Pixel Shader
    • Goal: successfully import & render the "Crytek Sponza", "Rungholt", "Amazon Lumberyard Bistro" in succession
• Deferred Shading Renderer
    • 2 GBuffers to start: Albedo & Normal
    • Full screen pass (Quad or Triangle) for lighting
        • Reconstruct world position from depth buffer
    • Utilize light volumes for point lights
• Update point lights in GPU
    • Use Compute Shaders
• SSAO
• Instanced Rendering
    • Draw multiple primitives in single Draw Calls
    • Batch primitives with similar Textures & Meshes
    • Build Instance Constants in a Buffer to be accessed in VS/PS
    • DrawIndexedInstanced
• Image Based Lighting
• Ambient Occlusion
• Static Animations
• Skinning

Done:
• init d3d11 device/context, and clear swap chain to grey color
• 1 red triangle
    • compile, load & bind Shaders
• change triangle position, rotation, scale & color in run-time
    • Constant Buffers
    • Affine Transformations
• flying camera
    • view & projection matrices
    • yaw, pitch, roll controls
    • polar coordinates
• 1 red Cube & Sphere (code-generated mesh)
    • basics of 3D geometry
    • generate, create & bind vertex/index buffers
• Albedo texture
    • Texture Sampling
    • UV coordinates
    • Loading images from disk (use https://github.com/nothings/stb/blob/master/stb_image.h)
    • Allocating GPU Buffer & CPU Upload Buffer to upload image bytes to GPU (Task removed)
• Numerous cubes & spheres
    • general purpose Renderer, Depth Buffer, Depth States
• Transparent cube
    • Blend states
    • Backface culling
    • Bucketizing Visuals
    • Multiple Render Passes
• Directional Light
    • Phong Lighting Equation
    • Hardcoded ambient lighting
• Point Lights
• Normal Mapping
    • detailed per-pixel lighting
    • TBN matrix
• Frustum Culling
    • Bounding Volume generation (Sphere & AABB)
    • shape-frustum intersection tests
    • debug color if intersecting or completely inside frustum
    • stress test (populate scene with >10,000 objects spread out)
• Convert local light lists to StructuredBuffer

//////////////////////////////////////////////////////////////////////////////

Engine Tasks:
• Assertions
• Command line arguments
    • https://github.com/jarro2783/cxxopts
• Text logging
    • https://github.com/gabime/spdlog
• Basic Editor Suite
    • https://github.com/ocornut/imgui
    • https://github.com/samhocevar/portable-file-dialogs

Done:
• dont use SDL_PollEvent. use SDL_PeepEvents instead. see: https://wiki.libsdl.org/SDL2/SDL_PeepEvents
• create helper function/macro for checking return values for SDL functions & printing error msgs & asserting if necessary
• frame rate controller
• Utilize CMake to generate project files
    • SDL header files should be in project & repo. Binary files must not.
• Remove the Windows console for the application
